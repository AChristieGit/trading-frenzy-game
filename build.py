#!/usr/bin/env python3
"""
Trading Game Build Script
Combines modular JavaScript files into a single HTML game file.
"""

import os
import sys
from pathlib import Path

def read_template_html(template_path):
    """Read the HTML template file."""
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        print(f"Error: Template file '{template_path}' not found.")
        return None
    except Exception as e:
        print(f"Error reading template: {e}")
        return None

def read_module(module_path):
    """Read a JavaScript module file."""
    try:
        with open(module_path, 'r', encoding='utf-8') as f:
            content = f.read()
        print(f"✓ Loaded module: {module_path}")
        return content
    except FileNotFoundError:
        print(f"Warning: Module '{module_path}' not found, skipping...")
        return ""
    except Exception as e:
        print(f"Error reading module {module_path}: {e}")
        return ""

def combine_modules(module_order):
    """Combine all JavaScript modules in the correct order."""
    combined_js = ""
    
    # Add header comment
    combined_js += "// ===== COMBINED GAME MODULES =====\n"
    combined_js += f"// Generated by build script\n"
    combined_js += f"// Module loading order: {' -> '.join(module_order)}\n\n"
    
    for module_name in module_order:
        module_path = f"{module_name}.js"
        module_content = read_module(module_path)
        
        if module_content:
            # Add module separator
            combined_js += f"// ===== {module_name.upper()} MODULE =====\n"
            combined_js += module_content
            combined_js += "\n\n"
    
    return combined_js

def build_game(template_file="template.html", output_file="game.html"):
    """Build the complete game HTML file."""
    print("Trading Game Build Script")
    print("=" * 40)
    
    # Define the correct module loading order
    module_order = [
        "config_module",      # No dependencies
        "auth_module",        # Needs config
        "gamestate_module",   # Needs config  
        "markets_module",     # Needs config + gameState
        "trading_module",     # Needs config + gameState
        "powerups_module",    # Needs config + gameState
        "ui_module",          # Needs config + gameState
        "stats_module"        # Needs config + auth
    ]
    
    print(f"Module loading order: {' -> '.join(module_order)}")
    print()
    
    # Read HTML template
    html_content = read_template_html(template_file)
    if html_content is None:
        return False
    
    # Combine all JavaScript modules
    print("Combining modules...")
    combined_js = combine_modules(module_order)
    
    # Find the module script tags placeholder - match your exact template format
    module_placeholder = '''<!-- Load modules in dependency order -->
<script src="config.js"></script>
<script src="auth.js"></script>
<script src="gameState.js"></script>
<script src="markets.js"></script>
<script src="trading.js"></script>
<script src="powerups.js"></script>
<script src="ui.js"></script>
<script src="stats.js"></script>

<!-- Main initialization -->
<script>
window.addEventListener('load', initializeSupabase);
</script>'''
    
    # Replace with combined JavaScript
    replacement = '<script>\n' + combined_js + '\n// Main initialization\nwindow.addEventListener(\'load\', initializeSupabase);\n</script>'
    
    if module_placeholder in html_content:
        html_content = html_content.replace(module_placeholder, replacement)
        print("✓ Successfully replaced module placeholders")
    else:
        print("Warning: Module placeholder not found in template. Adding script at end of body.")
        # Add before closing body tag
        html_content = html_content.replace('</body>', replacement + '\n</body>')
    
    # Write the combined file
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        print(f"✓ Build complete: {output_file}")
        print(f"✓ File size: {len(html_content):,} characters")
        return True
    except Exception as e:
        print(f"Error writing output file: {e}")
        return False

def main():
    """Main function with command line argument support."""
    # Default file names
    template_file = "template.html"
    output_file = "game.html"
    
    # Parse command line arguments
    if len(sys.argv) >= 2:
        template_file = sys.argv[1]
    if len(sys.argv) >= 3:
        output_file = sys.argv[2]
    
    # Check if we're in the right directory
    if not Path("config_module.js").exists():
        print("Error: config_module.js not found. Make sure you're in the directory with your module files.")
        print("\nExpected files:")
        expected_files = ["config_module.js", "auth_module.js", "gamestate_module.js", "markets_module.js", 
                         "trading_module.js", "powerups_module.js", "ui_module.js", "stats_module.js", template_file]
        for file in expected_files:
            exists = "✓" if Path(file).exists() else "✗"
            print(f"  {exists} {file}")
        return False
    
    # Build the game
    success = build_game(template_file, output_file)
    
    if success:
        print("\nBuild successful! You can now open the game.html file in your browser.")
        print("To rebuild after making changes: python build.py")
    else:
        print("\nBuild failed. Check the error messages above.")
    
    return success

if __name__ == "__main__":
    main()